// <auto-generated />
using System;
using DebtyFinal.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DebtyFinal.DataAccess.Migrations
{
    [DbContext(typeof(DebtyDBContext))]
    [Migration("20190115050521_InitializeDB")]
    partial class InitializeDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.DebtorLoan", b =>
                {
                    b.Property<Guid>("DebtorID");

                    b.Property<Guid>("LoanID");

                    b.HasKey("DebtorID", "LoanID");

                    b.HasIndex("LoanID");

                    b.ToTable("DebtorLoans");
                });

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.Loan", b =>
                {
                    b.Property<Guid>("LoanID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreditorPersonID");

                    b.Property<DateTime>("Deadline");

                    b.Property<DateTime>("LoanDate");

                    b.Property<string>("LoanDesc");

                    b.Property<string>("LoanName")
                        .IsRequired();

                    b.HasKey("LoanID");

                    b.HasIndex("CreditorPersonID");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("PersonID");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.Creditor", b =>
                {
                    b.HasBaseType("DebtyFinal.DataAccess.DataModels.Person");

                    b.HasDiscriminator().HasValue("Creditor");
                });

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.Debtor", b =>
                {
                    b.HasBaseType("DebtyFinal.DataAccess.DataModels.Person");

                    b.HasDiscriminator().HasValue("Debtor");
                });

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.DebtorLoan", b =>
                {
                    b.HasOne("DebtyFinal.DataAccess.DataModels.Debtor", "Debtor")
                        .WithMany("DebtorLoans")
                        .HasForeignKey("DebtorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DebtyFinal.DataAccess.DataModels.Loan", "Loan")
                        .WithMany("DebtorLoans")
                        .HasForeignKey("LoanID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DebtyFinal.DataAccess.DataModels.Loan", b =>
                {
                    b.HasOne("DebtyFinal.DataAccess.DataModels.Creditor", "Creditor")
                        .WithMany()
                        .HasForeignKey("CreditorPersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
