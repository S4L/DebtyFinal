// <auto-generated />
using System;
using DebtyFinal.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DebtyFinal.Migrations
{
    [DbContext(typeof(DebtyContext))]
    [Migration("20190111000949_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DebtyFinal.Models.Credential", b =>
                {
                    b.Property<Guid>("CredentialID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("CredentialID");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("DebtyFinal.Models.Loan", b =>
                {
                    b.Property<Guid>("LoanID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreditorPersonID");

                    b.Property<string>("DeadLine")
                        .IsRequired();

                    b.Property<Guid>("DebtorPersonID");

                    b.Property<string>("LoanAmount")
                        .IsRequired();

                    b.Property<string>("LoanDate")
                        .IsRequired();

                    b.Property<string>("LoanDesc");

                    b.Property<string>("LoanName")
                        .IsRequired();

                    b.Property<Guid>("PaymentID");

                    b.HasKey("LoanID");

                    b.HasIndex("CreditorPersonID");

                    b.HasIndex("DebtorPersonID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("DebtyFinal.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PayAmount");

                    b.Property<DateTime>("PayDate");

                    b.HasKey("PaymentID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DebtyFinal.Models.Person", b =>
                {
                    b.Property<Guid>("PersonID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("PersonCredentialCredentialID");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("PersonID");

                    b.HasIndex("PersonCredentialCredentialID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DebtyFinal.Models.Loan", b =>
                {
                    b.HasOne("DebtyFinal.Models.Person", "Creditor")
                        .WithMany()
                        .HasForeignKey("CreditorPersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DebtyFinal.Models.Person", "Debtor")
                        .WithMany()
                        .HasForeignKey("DebtorPersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DebtyFinal.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DebtyFinal.Models.Person", b =>
                {
                    b.HasOne("DebtyFinal.Models.Credential", "PersonCredential")
                        .WithMany()
                        .HasForeignKey("PersonCredentialCredentialID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
